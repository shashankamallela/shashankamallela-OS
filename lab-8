#include <stdio.h>

void roundRobin(int n, int bt[], int wt[], int tat[], int quantum) {
    int remaining_bt[n], time = 0;
    
    for (int i = 0; i < n; i++) remaining_bt[i] = bt[i];
    
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (remaining_bt[i] > 0) {
                done = 0;
                if (remaining_bt[i] > quantum) {
                    time += quantum;
                    remaining_bt[i] -= quantum;
                } else {
                    time += remaining_bt[i];
                    wt[i] = time - bt[i];
                    tat[i] = time;
                    remaining_bt[i] = 0;
                }
            }
        }
        if (done) break;
    }
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    int bt[n], wt[n], tat[n];
    
    printf("Enter burst times for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
    }
    
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    
    roundRobin(n, bt, wt, tat, quantum);

    printf("\nPID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
    
    return 0;
}

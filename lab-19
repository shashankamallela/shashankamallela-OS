 #include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5
#define NUM_INCREMENTS 100000

int counter = 0;               
void *incrementCounter(void *arg) {
    for (int i = 0; i < NUM_INCREMENTS; i++) {
        pthread_mutex_lock(&mutex);  // Lock the mutex
        counter++;                   // Critical section
        pthread_mutex_unlock(&mutex); // Unlock the mutex
    }
    return NULL;
}
int main() {
    pthread_t threads[NUM_THREADS];
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        printf("Failed to initialize mutex.\n");
        return 1;
    }
    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_create(&threads[i], NULL, incrementCounter, NULL) != 0) {
            printf("Error creating thread %d.\n", i);
            return 1;
        }
    }
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    printf("Final value of counter: %d\n", counter);

    return 0;
}

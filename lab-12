#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define NUM_PHILOSOPHERS 5
sem_t chopsticks[NUM_PHILOSOPHERS];
void* philosopher(void* arg) {
    int id = *(int*)arg;
    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
        printf("Philosopher %d is hungry and trying to pick up chopsticks.\n", id);
        sem_wait(&chopsticks[id]); 
        sem_wait(&chopsticks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d is eating.\n", id);
        sleep(2);
        printf("Philosopher %d is putting down chopsticks.\n", id);
        sem_post(&chopsticks[id]);                    
        sem_post(&chopsticks[(id + 1) % NUM_PHILOSOPHERS]); 
    }
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&chopsticks[i], 0, 1);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&chopsticks[i]);
    }
    return 0;
}
